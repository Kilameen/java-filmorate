DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS film_likes CASCADE;
DROP TABLE IF EXISTS film_genres CASCADE;
DROP TABLE IF EXISTS friendship CASCADE;
DROP TABLE IF EXISTS reviews CASCADE;
DROP TABLE IF EXISTS review_likes CASCADE;
DROP TABLE IF EXISTS events CASCADE;
DROP TABLE IF EXISTS directors CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS films_directors CASCADE;
DROP TABLE IF EXISTS rating_mpa CASCADE;

CREATE TABLE IF NOT EXISTS rating_mpa (
    rating_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_name VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS genres (
    genre_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS directors (
        director_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR(200) UNIQUE
);

CREATE TABLE IF NOT EXISTS films (
    film_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name VARCHAR(100) NOT NULL,
    description VARCHAR(200),
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    mpa_id BIGINT REFERENCES rating_mpa (rating_id) ON UPDATE RESTRICT ON delete CASCADE
);

CREATE TABLE IF NOT EXISTS films_directors (
    film_id BIGINT REFERENCES films (film_id) ON UPDATE RESTRICT ON DELETE CASCADE,
    director_id BIGINT REFERENCES directors ON UPDATE RESTRICT ON DELETE CASCADE,
    PRIMARY KEY (film_id,director_id)
);


CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(100) NOT NULL UNIQUE,
    login VARCHAR(100) NOT NULL UNIQUE,
    user_name VARCHAR(100) NOT NULL,
    birthday DATE
);

CREATE TABLE IF NOT EXISTS friendship (
    user_id BIGINT,
    friend_id BIGINT,
    status BOOLEAN,
    PRIMARY KEY (user_id, friend_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE RESTRICT ON delete CASCADE,
    FOREIGN KEY (friend_id) REFERENCES users (user_id) ON UPDATE RESTRICT ON delete CASCADE
    );

CREATE INDEX IF NOT EXISTS idx_friendship_user_id ON friendship (user_id);

CREATE TABLE IF NOT EXISTS film_genres (
       film_id  BIGINT,
       genre_id BIGINT,
       FOREIGN KEY (film_id) REFERENCES films (film_id) ON UPDATE RESTRICT ON DELETE CASCADE,
       FOREIGN KEY (genre_id) REFERENCES genres (genre_id) ON UPDATE RESTRICT ON DELETE CASCADE,
       PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS film_likes (
       film_id BIGINT,
       user_id BIGINT,
       FOREIGN KEY (film_id) REFERENCES films (film_id) ON UPDATE RESTRICT ON DELETE CASCADE,
       FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE RESTRICT ON DELETE CASCADE,
       PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS reviews (
       review_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
       content VARCHAR(255) NOT NULL,
       is_positive BOOLEAN NOT NULL,
       user_id BIGINT,
       film_id BIGINT,
      FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE RESTRICT ON DELETE CASCADE,
       FOREIGN KEY (film_id) REFERENCES films (film_id) ON UPDATE RESTRICT ON DELETE CASCADE,
             useful INT  DEFAULT 0
);

CREATE TABLE IF NOT EXISTS review_likes (
       review_id BIGINT,
       user_id BIGINT,
       is_positive BOOLEAN DEFAULT TRUE,
       FOREIGN KEY (review_id) REFERENCES reviews (review_id) ON UPDATE RESTRICT ON delete CASCADE,
       FOREIGN KEY (user_id) REFERENCES users (user_id) ON UPDATE RESTRICT ON delete CASCADE,
       PRIMARY KEY (review_id, user_id)
);

CREATE TABLE IF NOT EXISTS events (
    event_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    timestamp BIGINT,
    event_type VARCHAR(20) NOT NULL,
    operation VARCHAR(20) NOT NULL,
    entity_id BIGINT
);



